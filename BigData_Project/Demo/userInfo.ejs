
<html>
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
    <meta charset="utf-8">
    <title>Google Map Visualisation</title>
<style>

.bar {
  fill: steelblue;
}

.bar:hover {
  fill: brown;
}

.line {
  fill: none;
  stroke: steelblue;
  stroke-width: 1.5px;
}

.axis--x path {
  display: none;
}

</style>

	<link href="css/main.css" rel="stylesheet" type="text/css" />
	<script type="text/javascript">	  
		function gmapCallback(){
			console.log("Map loaded");
		}	
	</script>

	<!-- <script src="https://maps.googleapis.com/maps/api/js?v=3.exp&key=AIzaSyBRQ1g46Xgr1PCLAij18r0upbz2Vf7_Ioo"></script> -->
	<!-- <script src="https://maps.googleapis.com/maps/api/js?callback=gmapCallback"></script> -->
	<script src="https://maps.googleapis.com/maps/api/js?v=3&key=AIzaSyBRQ1g46Xgr1PCLAij18r0upbz2Vf7_Ioo"></script>
    <!-- <script type="text/javascript" src="js/geoXML3.js"></script> -->
	<script src="js/oms.min.js"></script>
	
	<script src="https://d3js.org/d3.v4.min.js"></script>
   
	<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
<!-- <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?sensor=false"></script> -->

     
	  <script type="text/javascript">


var map, circle; 
var markers; 
var markerCluster;
var mcOptions = {gridSize: 50, maxZoom: 20};
var oms;
var bounds;
var path;
var boundPoly;
var mapOptions;
// var business contains business details in JSON format
var business = <%- JSON.stringify(recommendationDetails) %>;

// var business_checkin contains all checkin_business details in JSON format
var business_checkin = <%- JSON.stringify(busniessCheckinDetails) %>;

function initMap() {
  var states = document.getElementById("state");
  var selected_state = states.options[states.selectedIndex].value;
  var myLatlng;
  switch(selected_state) {
    case "ON":
        myLatlng = new google.maps.LatLng(43.463111971, -80.526572458);
        break;
    case "QC":
        myLatlng = new google.maps.LatLng(45.5364653, -73.6146713);
        break;
    case "AZ":
        myLatlng = new google.maps.LatLng(33.6392, -111.88148);
        break;
    case "IL":
        myLatlng = new google.maps.LatLng(40.124499, -88.187988);
        break;
    case "NC":
        myLatlng = new google.maps.LatLng(35.1517973, -80.9507926);
        break;
    case "NV":
        myLatlng = new google.maps.LatLng(36.047815, -115.244075);
        break;
    case "PA":
        myLatlng = new google.maps.LatLng(40.404148, -79.918819);
        break;
    case "SC":
        myLatlng = new google.maps.LatLng(35.0959529, -80.9340765);
        break;
    case "WI":
        myLatlng = new google.maps.LatLng(43.0390563, -89.4610552);
        break;
    case "EDH":
        myLatlng = new google.maps.LatLng(55.9497942, -3.1905734);
        break;
    case "BW":
        myLatlng = new google.maps.LatLng(48.9917, 8.37562);
        break;
  }
 new google.maps.LatLng(business[0].latitude, business[0].longitude);
  mapOptions = {
    zoom: 12,
    center: myLatlng, 
    mapTypeId: google.maps.MapTypeId.ROADMAP,
    draggableCursor:'crosshair'   
  }
   map = new google.maps.Map(document.getElementById('map-canvas'),
      mapOptions);		
      
	  // Add circle overlay and bind to marker
	 circle = new google.maps.Circle({
	  <!-- map: map, -->
	  radius: 500,    // 130 in metres
	  center: myLatlng,
	  strokeColor: "#3ADF00",
        strokeOpacity: 0.8,
        strokeWeight: 2,
        fillColor: "#3ADF00",
        fillOpacity: 0.35
	});
	<!-- circle.bindTo('center', marker, 'position'); -->
   fileInputFunc(selected_state);
   bar_chart(selected_state);
	
  }
	function toggleRadius() {
	  circle.setMap(circle.getMap() ? null : map);
	}
google.maps.event.addDomListener(window, 'load', initMap);

	
function fileInputFunc(selected_state){  
	var pingList = business;
    var siteCircle;
    var pingMarker;
    initialize();
  

	function initialize() {
		map.setOptions(mapOptions);
		if (typeof markers != 'undefined'){
			deleteMarkers();
		}

		   markers = [];
		   oms = new OverlappingMarkerSpiderfier(map, {keepSpiderfied: true});
		   //bounds = new google.maps.LatLngBounds();

          // Construct a circle and marker for each value in pingList.
          for (var ping in pingList) {
            if (pingList[ping].state == selected_state) {
			var infowindow = new google.maps.InfoWindow({maxWidth:800});
			var latitude = parseFloat(pingList[ping].latitude);
			var longitude = parseFloat(pingList[ping].longitude);
			
			var info = "<pre>" + pingList[ping].name + "<br />" + 'Rating:' + pingList[ping].stars + "<br />" + 'Address:' + pingList[ping].full_address + "</pre>";
			var t =   pingList[ping].name + ' - ' + pingList[ping].stars;
			var latLng = new google.maps.LatLng(latitude, longitude);
            var marker = new google.maps.Marker({
				title: t,
				content: info,
				position: latLng,
				map: map
				});
						
			google.maps.event.addListener(marker, 'mouseover', function() {
				infowindow.setContent(this.content); 
				infowindow.open(map,this);
			});
			google.maps.event.addListener(marker, 'mouseout', function() {
				infowindow.close();
			});
			/* oms.addListener('mouseover', function(marker, event) {
			  infowindow.setContent(this.content);
			  infowindow.open(map, this);
			}); */
			markers.push(marker);
			oms.addMarker(marker);
			// points.push(latLng);
          }
		 }
        }
		
		// Return array of string values, or NULL if CSV string not well formed.
		function LinetoArray(text) {
			var re_valid = /^\s*(?:'[^'\\]*(?:\\[\S\s][^'\\]*)*'|"[^"\\]*(?:\\[\S\s][^"\\]*)*"|[^,'"\s\\]*(?:\s+[^,'"\s\\]+)*)\s*(?:,\s*(?:'[^'\\]*(?:\\[\S\s][^'\\]*)*'|"[^"\\]*(?:\\[\S\s][^"\\]*)*"|[^,'"\s\\]*(?:\s+[^,'"\s\\]+)*)\s*)*$/;
			var re_value = /(?!\s*$)\s*(?:'([^'\\]*(?:\\[\S\s][^'\\]*)*)'|"([^"\\]*(?:\\[\S\s][^"\\]*)*)"|([^,'"\s\\]*(?:\s+[^,'"\s\\]+)*))\s*(?:,|$)/g;
			// Return NULL if input string is not well formed CSV string.
			if (!re_valid.test(text)) return null;
			var a = [];                     // Initialize array to receive values.
			text.replace(re_value, // "Walk" the string using replace with callback.
				function(m0, m1, m2, m3) {
					// Remove backslash from \' in single quoted values.
					if      (m1 !== undefined) a.push(m1.replace(/\\'/g, "'"));
					// Remove backslash from \" in double quoted values.
					else if (m2 !== undefined) a.push(m2.replace(/\\"/g, '"'));
					else if (m3 !== undefined) a.push(m3);
					return ''; // Return empty string.
				});
			// Handle special case of empty last value.
			if (/,\s*$/.test(text)) a.push('');
			return a;
		};
		
	// Parse csv file and make objects to store in pingList array.
        function csvParse(csv) {
			
          var lines = csv.split("\n");
          
          // Log for debug. Success.
          // console.log(lines);
          
          var result = [];
          // var headers = lines[0].split(",");
		  var headers = LinetoArray(lines[0]);
 
          for (var i = 1; i < lines.length; i++) {
			// if(lines[i].trim().equals("") || lines[i].trim().equals("\n")){
				// console.log("empty line");
				// continue;
			// }
			
            var obj = {};
            // var currentline = lines[i].split(",");
			var currentline = LinetoArray(lines[i]);
			if(currentline == "" || currentline == null){
				console.log("empty line");
				continue;
			}
				
			var empty_cnt = 0;
            for (var j = 0; j < headers.length; j++) {
              obj[headers[j]] = currentline[j];
			  if(currentline[j] == ""){
				empty_cnt++;
			  }
            }
			if(empty_cnt < headers.length){
				result.push(obj);
			}
			else {
				console.log("empty row");
			}
          }
 
          return result;
        }
		
		// Sets the map on all markers in the array.
		function setMapOnAll(map) {
		  for (var i = 0; i < markers.length; i++) {
			markers[i].setMap(map);
		  }
		}
		
		// Removes the markers from the map, but keeps them in the array.
		function clearMarkers() {
		  setMapOnAll(null);
		}
		
		// Deletes all markers in the array by removing references to them.
		function deleteMarkers() {
		  if(markerCluster != undefined){
			markerCluster.clearMarkers();		  
		  }
		  oms.clearMarkers();
		  //clearMarkers();
		  //markers = [];
		   
		}
		
		function polygon_paths_from_bounds(){
				path = [] ;
				var ne = bounds.getNorthEast();
				var sw = bounds.getSouthWest();
				
				path.push(ne);
				path.push(new google.maps.LatLng(sw.lat(), ne.lng()));
				path.push(sw);
				path.push(new google.maps.LatLng(ne.lat(), sw.lng()));
				//paths.push(path);
				//return path;		
					
				console.log(ne.lat() +", "+ ne.lng());
				console.log(sw.lat() +", "+ ne.lng());
				console.log(sw.lat() +", "+ sw.lng());
				console.log(ne.lat() +", "+ sw.lng());
		}
}
	function toggleBounds() {
	  boundPoly.setMap(boundPoly.getMap() ? null : map);
	  map.fitBounds(bounds);
	}

// function bar_chart create 5 analytics graphs using d3js technology
function bar_chart(selected_state){
lineChartRemove();
d3.select("#bar_chart").selectAll("svg").remove();
var svg = d3.select("#bar_chart").append("svg"),
    margin = {top: 20, right: 20, bottom: 30, left: 40},
    width = +300 - margin.left - margin.right,
    height = +150 - margin.top - margin.bottom;

var x = d3.scaleBand().rangeRound([0, width]).padding(0.1),
    y = d3.scaleLinear().rangeRound([height, 0]);

var g = svg.append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var data = [];
    for (var i = 0; i < business.length; i++) {
        if (business[i].state == selected_state) {
            data[data.length] = business[i];
        }
    }

  x.domain(data.map(function(d) { return d.name; }));
  y.domain([0, d3.max(data, function(d) { return d.stars; })]);

  g.append("g")
      .attr("class", "axis axis--x")
      .attr("transform", "translate(0," + height + ")")
      .call(d3.axisBottom(x))
    .selectAll("text")	
        .style("text-anchor", "end")
        .attr("dx", "-.8em")
        .attr("dy", ".15em")
        .attr("transform", "rotate(-65)");;

  g.append("g")
      .attr("class", "axis axis--y")
      .call(d3.axisLeft(y))
    .append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", "0.71em")
      .attr("text-anchor", "end")
      .text("Frequency");

  g.selectAll(".bar")
    .data(data)
    .enter().append("rect")
      .attr("class", "bar")
      .attr("x", function(d) { return x(d.name); })
      .attr("y", function(d) { return y(d.stars); })
      .attr("width", x.bandwidth())
      .attr("height", function(d) { return height - y(d.stars); });

    g.append("text")
        .attr("x", (width / 2))             
        .attr("y", 0 - (margin.top / 2))
        .attr("text-anchor", "middle")  
        .style("font-size", "16px") 
        .style("text-decoration", "underline")  
        .text("Restaurants By Ratings");

	g.selectAll("rect")
			.on("mousedown", function(d) { lineChartGen(d.business_id); })
			//.on("mouseout", function() { lineChartRemove(); })
}

function lineChartGen(business_id){
    lineChartRemove();
    var filter_checkin = [];
    for (var i = 0; i < business_checkin.length; i++) {
        if (business_checkin[i].business_id == business_id) {
            filter_checkin[filter_checkin.length] = business_checkin[i];
        }
    }

    var days = ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];
    for (var day = 0; day < days.length; day++) {
        var data = [];
        for (var i = 0; i < filter_checkin.length; i++) {
            if (filter_checkin[i].day == day) {
                data[data.length] = filter_checkin[i];
            }
        }
		data = data.sort(function(a, b) {
            return a.hour - b.hour;
        });
        if (data.length <=1 ) {
            continue;        
        }

        var svg = d3.select("#daily_chart").append("svg"),
            margin = {top: 20, right: 20, bottom: 30, left: 40},
            width = +300 - margin.left - margin.right,
            height = +150 - margin.top - margin.bottom;

        var x = d3.scaleBand().rangeRound([0, width]).padding(0.1),
        y = d3.scaleLinear().rangeRound([height, 0]);

        var g = svg.append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        var x = d3.scaleLinear()
            .rangeRound([0, width]);

        var y = d3.scaleLinear()
            .rangeRound([height, 0]);

        var line = d3.line()
            .x(function(d) { return x(d.hour); })
            .y(function(d) { return y(d.checkin); });

        x.domain(d3.extent(data, function(d) { return d.hour; }));
        y.domain(d3.extent(data, function(d) { return d.checkin; }));

        g.append("g")
          .attr("class", "axis axis--x")
          .attr("transform", "translate(0," + height + ")")
          .call(d3.axisBottom(x));

        g.append("g")
          .attr("class", "axis axis--y")
          .call(d3.axisLeft(y))
          .append("text")
          .attr("fill", "#000")
          .attr("transform", "rotate(-90)")
          .attr("y", 6)
          .attr("dy", "0.71em")
          .style("text-anchor", "end")
          .text("No. Checkin");

        g.append("path")
          .datum(data)
          .attr("class", "line")
          .attr("d", line);

        g.append("text")
        .attr("x", 10)             
        .attr("y", 0 - (margin.top / 2))
        .attr("text-anchor", "middle")  
        .style("font-size", "10px") 
        .style("text-decoration", "underline")  
        .text(days[day]);
    }
}
	
	// remove 4 line charts showing marginal effects
	function lineChartRemove(){
        d3.select("#daily_chart").selectAll("svg").remove();
	};
	
    </script>
  </head>
  
  <left width=100
  <body>
  <div class="container">
            <ul id="nav">
                
                <li class="active"><a><b><%= firstname %></b>. Check out these restaurants!</a></li>

            </ul>
        </div>
 <select id="state" onchange="initMap()">
  <option value="ON">Ontario, Canada</option>
  <option value="QC">Quebec, Canada</option>
  <option value="AZ">Arizona, United States</option>
  <option value="IL">Illinois, United States</option>
  <option value="NC">North Carolina, United States</option>
  <option value="NV">Nevada, United States</option>
  <option value="PA">Pennsylvania, United States</option>
  <option value="SC">South Carolina, United States</option>
  <option value="WI">Wisconsin, United States</option>
  <option value="EDH">Edinburgh, England</option>
  <option value="BW">Baden-Wurttemberg, Germany</option>
</select>   
    <div id="map-canvas" style="width:100%; height:88%; float:left"></div>
    
    <center>
  <div class="container">
            <ul id="nav"> 
                <li class="active"><a href="#bottom">More Details</a></li>
            </ul>
        </div>
    <br/><br/>
    
    <br/><br/>
        <div id="bar_chart">
		</div>
		<div id="daily_chart">
		</div>
        <br/><br/><br/><br/><br/><br/><br/><br/>
        <br/><br/><br/><br/><br/><br/><br/><br/>
        <br/><br/><br/><br/><br/><br/><br/><br/>
        <br/><br/><br/><br/><br/><br/><br/><br/>
    </center>

    <div id="bottom">
		</div>

  </body>
  </left>
</html>